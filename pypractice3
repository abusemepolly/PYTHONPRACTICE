print("Задание 1")

def encode_string(s):
    # Инициализация списка для хранения закодированной строки и счетчика повторений символов
    encoded_s = []
    count = 1

    # Итерация по входной строке начиная со второго символа
    for i in range(1, len(s)):
        # Если текущий символ равен предыдущему, увеличиваем счетчик
        if s[i] == s[i - 1]:
            count += 1
        else:
            # Если текущий символ отличается от предыдущего, добавляем предыдущий символ
            # и его количество повторений (если оно больше 1) в encoded_s
            encoded_s.append(s[i - 1] + (str(count) if count > 1 else ""))
            # Сбрасываем счетчик повторений
            count = 1

    # После окончания итерации добавляем последний символ и его количество повторений
    # (если оно больше 1) в encoded_s
    encoded_s.append(s[-1] + (str(count) if count > 1 else ""))

    # Возвращаем закодированную строку, объединяя все элементы encoded_s
    return "".join(encoded_s)


input_str = input("Введите строку для кодирования: ")

encoded_str = encode_string(input_str)
print(f"Закодированная строка: {encoded_str}")

print("Задание 1.1")

import re

def decode_string(s):
    # Используем регулярное выражение для поиска пар (символ, число)
    pattern = re.compile(r'([A-Za-z])(\d*)')
    # Находим все пары (символ, число) в входной строке
    matches = pattern.findall(s)

    decoded_s = []
    # Итерация по всем найденным парам
    for char, num in matches:
        # Если число присутствует, конвертируем его в int, иначе используем 1
        num = int(num) if num else 1
        # Повторяем символ указанное количество раз и добавляем в декодированную строку
        decoded_s.append(char * num)

    # Объединяем все части декодированной строки и возвращаем результат
    return "".join(decoded_s)

input_str = input("Введите закодированную строку для декодирования: ")

decoded_str = decode_string(input_str)
print(f"Декодированная строка: {decoded_str}")


print("Задание 2")

from collections import Counter

def three_most_common_chars(s):
    # Удаляем все пробелы из строки
    s = s.replace(" ", "")

    # Создаем словарь, где ключ - символ, значение - частота символа в строке
    char_freq = Counter(s)

    # Ищем три наиболее часто встречающихся символа
    most_common_chars = char_freq.most_common(3)

    # Выводим результат
    for char, freq in most_common_chars:
        print(f"Символ: {char}, Количество: {freq}")


# Ввод строки пользователем
input_str = input("Введите строку: ")
# Вызываем функцию
three_most_common_chars(input_str)

print("Задание 3")


def number_to_words(n):
    ones = ["", "один", "два", "три", "четыре",
            "пять", "шесть", "семь", "восемь", "девять",
            "десять", "одиннадцать", "двенадцать", "тринадцать",
            "четырнадцать", "пятнадцать", "шестнадцать",
            "семнадцать", "восемнадцать", "девятнадцать"]

    tens = ["", "", "двадцать", "тридцать", "сорок",
            "пятьдесят", "шестьдесят", "семьдесят",
            "восемьдесят", "девяносто"]

    hundreds = ["", "сто", "двести", "триста", "четыреста",
                "пятьсот", "шестьсот", "семьсот",
                "восемьсот", "девятьсот"]

    if 1 <= n < 20:
        return ones[n]
    elif 20 <= n < 100:
        return tens[n // 10] + ('' if n % 10 == 0 else ' ' + ones[n % 10])
    elif 100 <= n < 1000:
        return hundreds[n // 100] + ('' if n % 100 == 0 else ' ' + number_to_words(n % 100))
    else:
        raise ValueError("Число вне диапазона")


try:
    # Ввод числа пользователем
    num = int(input("Введите число от 1 до 1000: "))
    # Выводим текстовое представление числа
    print(number_to_words(num))
except ValueError as e:
    print(e)
